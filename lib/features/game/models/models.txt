-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.eliminations (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  party_id bigint NOT NULL,
  eliminated_player_id uuid NOT NULL,
  eliminator_player_id uuid,
  elimination_type text NOT NULL,
  mission_id bigint,
  witness_player_id uuid,
  CONSTRAINT eliminations_pkey PRIMARY KEY (id),
  CONSTRAINT eliminations_party_id_fkey FOREIGN KEY (party_id) REFERENCES public.parties(id),
  CONSTRAINT eliminations_eliminated_player_id_fkey FOREIGN KEY (eliminated_player_id) REFERENCES auth.users(id),
  CONSTRAINT eliminations_eliminator_player_id_fkey FOREIGN KEY (eliminator_player_id) REFERENCES auth.users(id),
  CONSTRAINT eliminations_mission_id_fkey FOREIGN KEY (mission_id) REFERENCES public.mission(id),
  CONSTRAINT eliminations_witness_player_id_fkey FOREIGN KEY (witness_player_id) REFERENCES auth.users(id)
);
CREATE TABLE public.mission (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  party_id bigint,
  item text NOT NULL DEFAULT ''::text,
  location text NOT NULL DEFAULT ''::text,
  completed boolean NOT NULL DEFAULT false,
  user_id uuid NOT NULL,
  target_id uuid NOT NULL,
  inherited_from_mission_id bigint,
  active boolean NOT NULL DEFAULT true,
  CONSTRAINT mission_pkey PRIMARY KEY (id),
  CONSTRAINT mission_target_id_fkey FOREIGN KEY (target_id) REFERENCES auth.users(id),
  CONSTRAINT mission_party_id_fkey FOREIGN KEY (party_id) REFERENCES public.parties(id),
  CONSTRAINT mission_inherited_from_mission_id_fkey FOREIGN KEY (inherited_from_mission_id) REFERENCES public.mission(id),
  CONSTRAINT mission_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.parties (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL UNIQUE,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  code text NOT NULL UNIQUE,
  host_id uuid NOT NULL,
  CONSTRAINT parties_pkey PRIMARY KEY (id, code),
  CONSTRAINT parties_host_id_fkey FOREIGN KEY (host_id) REFERENCES auth.users(id)
);
CREATE TABLE public.party_players (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  party_id bigint NOT NULL,
  status USER-DEFINED NOT NULL DEFAULT 'waiting'::status,
  player_id uuid NOT NULL,
  insert_location text NOT NULL,
  insert_item text NOT NULL,
  CONSTRAINT party_players_pkey PRIMARY KEY (id),
  CONSTRAINT Games_party_id_fkey FOREIGN KEY (party_id) REFERENCES public.parties(id),
  CONSTRAINT party_players_player_id_fkey FOREIGN KEY (player_id) REFERENCES auth.users(id)
);
CREATE TABLE public.witness_reports (
  id bigint GENERATED ALWAYS AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  party_id bigint NOT NULL,
  witness_player_id uuid NOT NULL,
  accused_player_id uuid NOT NULL,
  victim_player_id uuid NOT NULL,
  location text NOT NULL,
  item text NOT NULL,
  verified boolean,
  resolution_time timestamp with time zone,
  CONSTRAINT witness_reports_pkey PRIMARY KEY (id),
  CONSTRAINT witness_reports_party_id_fkey FOREIGN KEY (party_id) REFERENCES public.parties(id),
  CONSTRAINT witness_reports_witness_player_id_fkey FOREIGN KEY (witness_player_id) REFERENCES auth.users(id),
  CONSTRAINT witness_reports_accused_player_id_fkey FOREIGN KEY (accused_player_id) REFERENCES auth.users(id),
  CONSTRAINT witness_reports_victim_player_id_fkey FOREIGN KEY (victim_player_id) REFERENCES auth.users(id)
);